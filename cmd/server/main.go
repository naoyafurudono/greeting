package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"

	"connectrpc.com/connect"

	greetv1 "github.com/naoyafurudono/proto-cli/gen/greet/v1"        // generated by protoc-gen-go
	"github.com/naoyafurudono/proto-cli/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
	"github.com/spf13/cobra"
)

// Service implementation

type GreetServer struct{}

var _ greetv1connect.GreetServiceHandler = &GreetServer{}

func (s *GreetServer) Hello(
	ctx context.Context,
	req *connect.Request[greetv1.HelloRequest],
) (*connect.Response[greetv1.HelloResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.HelloResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.GetName()),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func (s *GreetServer) Thanks(
	ctx context.Context,
	req *connect.Request[greetv1.ThanksRequest],
) (*connect.Response[greetv1.ThanksResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.ThanksResponse{
		Greeting: fmt.Sprintf("Thanks %s for your %s!", req.Msg.GetName(), req.Msg.GetWhy()),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

// CLI implementation (generated)
func newGreetCommand(s greetv1connect.GreetServiceHandler) *cobra.Command {
	var greetService = &cobra.Command{
		Use:   "great",
		Short: "Important service.",
		Long:  "Important service.",
	}
	var reqData *string = greetService.PersistentFlags().StringP("data", "d", "{}", "request message represented as a JSON")
	// var greeter = &GreetServer{}

	// hello rpc
	var greetServiceHello = &cobra.Command{
		Use:   "hello",
		Short: "basic greeting",
		Long:  "basic greeting",
		RunE: func(cmd *cobra.Command, args []string) error {
			var req greetv1.HelloRequest
			json.Unmarshal([]byte(*reqData), &req)
			res, err := s.Hello(
				context.Background(),
				connect.NewRequest(&req),
			)
			if err != nil {
				return err
			}
			out, err := json.Marshal(res.Msg)
			if err != nil {
				return err
			}
			fmt.Println(string(out))
			return nil
		},
	}

	// thanks rpc
	var greetServiceThanks = &cobra.Command{
		Use:   "thanks",
		Short: "basic greeting",
		Long:  "basic greeting",
		RunE: func(cmd *cobra.Command, args []string) error {
			var req greetv1.ThanksRequest
			json.Unmarshal([]byte(*reqData), &req)
			res, err := s.Thanks(
				context.Background(),
				connect.NewRequest(&req),
			)
			if err != nil {
				return err
			}
			out, err := json.Marshal(res.Msg)
			if err != nil {
				return err
			}
			fmt.Println(string(out))
			return nil
		},
	}
	
	greetService.AddCommand(
		greetServiceHello,
		greetServiceThanks,
	)
	return greetService
}

func main() {
	var greetCmd = newGreetCommand(&GreetServer{})
	if err := greetCmd.Execute(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
