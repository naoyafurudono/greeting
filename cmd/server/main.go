package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"

	"connectrpc.com/connect"

	"github.com/naoyafurudono/proto-cli/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
	"github.com/naoyafurudono/proto-cli/service"
	"github.com/spf13/cobra"
)


// CLI generater (what we implement)

// Generate a spf13/cobra command for a connect rpc.
// It will incorporate protovalidate or such kind of intercepter in the future development.
func RpcCommand[Req, Res any](
	ctx context.Context,
	rpc func(context.Context, *connect.Request[Req]) (*connect.Response[Res], error),
	use, short, long string,
	reqData *string) *cobra.Command {
	return &cobra.Command{
		Use:   use,
		Short: short,
		Long:  long,
		RunE: func(cmd *cobra.Command, args []string) error {
			var req Req
			json.Unmarshal([]byte(*reqData), &req)
			res, err := rpc(
				ctx,
				connect.NewRequest(&req),
			)
			if err != nil {
				return err
			}
			out, err := json.Marshal(res.Msg)
			if err != nil {
				return err
			}
			fmt.Println(string(out))
			return nil
		},
	}
}

// CLI implementation (what we generate)
func newGreetCommand(ctx context.Context, s greetv1connect.GreetServiceHandler) *cobra.Command {
	var greetService = &cobra.Command{
		Use:   "great",
		Short: "Important service.",
		Long:  "Important service.",
	}
	var reqData *string = greetService.PersistentFlags().StringP("data", "d", "{}", "request message represented as a JSON")

	greetServiceHello := RpcCommand(ctx,
		s.Hello,
		"hello",
		"basic greeting",
		"basic greeting",
		reqData,
	)
	greetServiceThanks := RpcCommand(ctx,
		s.Thanks,
		"thanks",
		"you cannot live alone",
		"you cannot live alone",
		reqData,
	)

	greetService.AddCommand(
		greetServiceHello,
		greetServiceThanks,
	)
	return greetService
}

// The entry point (what you implement)
func main() {
	var greetCmd = newGreetCommand(context.Background(), &service.GreetServer{})
	if err := greetCmd.Execute(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
