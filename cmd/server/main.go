package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"

	"connectrpc.com/connect"

	v1 "github.com/naoyafurudono/proto-cli/gen/greet/v1"        // generated by protoc-gen-go
	"github.com/naoyafurudono/proto-cli/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
	"github.com/spf13/cobra"
)

// Service implementation (what you implement)

type GreetServer struct{}

var _ greetv1connect.GreetServiceHandler = &GreetServer{}

func (s *GreetServer) Hello(
	ctx context.Context,
	req *connect.Request[v1.HelloRequest],
) (*connect.Response[v1.HelloResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&v1.HelloResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.GetName()),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func (s *GreetServer) Thanks(
	ctx context.Context,
	req *connect.Request[v1.ThanksRequest],
) (*connect.Response[v1.ThanksResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&v1.ThanksResponse{
		Greeting: fmt.Sprintf("Thanks %s for your %s!", req.Msg.GetName(), req.Msg.GetWhy()),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

// CLI implementation (what we implement)
 
func rpcCommand[Req, Res any](
	ctx context.Context,
	rpc func(context.Context, *connect.Request[Req]) (*connect.Response[Res], error),
	use, short, long string,
	reqData *string) *cobra.Command {
	return &cobra.Command{
		Use:   use,
		Short: short,
		Long:  long,
		RunE: func(cmd *cobra.Command, args []string) error {
			var req Req
			json.Unmarshal([]byte(*reqData), &req)
			res, err := rpc(
				ctx,
				connect.NewRequest(&req),
			)
			if err != nil {
				return err
			}
			out, err := json.Marshal(res.Msg)
			if err != nil {
				return err
			}
			fmt.Println(string(out))
			return nil
		},
	}
}

func newGreetCommand(ctx context.Context, s greetv1connect.GreetServiceHandler) *cobra.Command {
	var greetService = &cobra.Command{
		Use:   "great",
		Short: "Important service.",
		Long:  "Important service.",
	}
	var reqData *string = greetService.PersistentFlags().StringP("data", "d", "{}", "request message represented as a JSON")

	greetServiceHello := rpcCommand(ctx,
		s.Hello,
		"hello",
		"basic greeting",
		"basic greeting",
		reqData,
	)
	greetServiceThanks := rpcCommand(ctx,
		s.Thanks,
		"thanks",
		"you cannot live alone",
		"you cannot live alone",
		reqData,
	)

	greetService.AddCommand(
		greetServiceHello,
		greetServiceThanks,
	)
	return greetService
}

// The entry point (what you implement)
func main() {
	var greetCmd = newGreetCommand(context.Background(), &GreetServer{})
	if err := greetCmd.Execute(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
