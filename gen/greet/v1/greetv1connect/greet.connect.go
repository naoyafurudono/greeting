// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: greet/v1/greet.proto

package greetv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/naoyafurudono/proto-cli/gen/greet/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GreetServiceName is the fully-qualified name of the GreetService service.
	GreetServiceName = "greet.v1.GreetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetServiceHelloProcedure is the fully-qualified name of the GreetService's Hello RPC.
	GreetServiceHelloProcedure = "/greet.v1.GreetService/Hello"
	// GreetServiceThanksProcedure is the fully-qualified name of the GreetService's Thanks RPC.
	GreetServiceThanksProcedure = "/greet.v1.GreetService/Thanks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	greetServiceServiceDescriptor      = v1.File_greet_v1_greet_proto.Services().ByName("GreetService")
	greetServiceHelloMethodDescriptor  = greetServiceServiceDescriptor.Methods().ByName("Hello")
	greetServiceThanksMethodDescriptor = greetServiceServiceDescriptor.Methods().ByName("Thanks")
)

// GreetServiceClient is a client for the greet.v1.GreetService service.
type GreetServiceClient interface {
	// basic greeting
	Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error)
	// you cannot live alone
	Thanks(context.Context, *connect.Request[v1.ThanksRequest]) (*connect.Response[v1.ThanksResponse], error)
}

// NewGreetServiceClient constructs a client for the greet.v1.GreetService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greetServiceClient{
		hello: connect.NewClient[v1.HelloRequest, v1.HelloResponse](
			httpClient,
			baseURL+GreetServiceHelloProcedure,
			connect.WithSchema(greetServiceHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		thanks: connect.NewClient[v1.ThanksRequest, v1.ThanksResponse](
			httpClient,
			baseURL+GreetServiceThanksProcedure,
			connect.WithSchema(greetServiceThanksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// greetServiceClient implements GreetServiceClient.
type greetServiceClient struct {
	hello  *connect.Client[v1.HelloRequest, v1.HelloResponse]
	thanks *connect.Client[v1.ThanksRequest, v1.ThanksResponse]
}

// Hello calls greet.v1.GreetService.Hello.
func (c *greetServiceClient) Hello(ctx context.Context, req *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// Thanks calls greet.v1.GreetService.Thanks.
func (c *greetServiceClient) Thanks(ctx context.Context, req *connect.Request[v1.ThanksRequest]) (*connect.Response[v1.ThanksResponse], error) {
	return c.thanks.CallUnary(ctx, req)
}

// GreetServiceHandler is an implementation of the greet.v1.GreetService service.
type GreetServiceHandler interface {
	// basic greeting
	Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error)
	// you cannot live alone
	Thanks(context.Context, *connect.Request[v1.ThanksRequest]) (*connect.Response[v1.ThanksResponse], error)
}

// NewGreetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetServiceHandler(svc GreetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greetServiceHelloHandler := connect.NewUnaryHandler(
		GreetServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(greetServiceHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	greetServiceThanksHandler := connect.NewUnaryHandler(
		GreetServiceThanksProcedure,
		svc.Thanks,
		connect.WithSchema(greetServiceThanksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/greet.v1.GreetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreetServiceHelloProcedure:
			greetServiceHelloHandler.ServeHTTP(w, r)
		case GreetServiceThanksProcedure:
			greetServiceThanksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetServiceHandler struct{}

func (UnimplementedGreetServiceHandler) Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greet.v1.GreetService.Hello is not implemented"))
}

func (UnimplementedGreetServiceHandler) Thanks(context.Context, *connect.Request[v1.ThanksRequest]) (*connect.Response[v1.ThanksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greet.v1.GreetService.Thanks is not implemented"))
}
